module Test

data Bool
| True
| False

data Nat
| zero
| suc Nat

def id : (A : U) -> (_ : A) -> A = \ A x => x

def zero? : Nat → Bool =
\n => elim n
| zero => True
| suc _ => False

def not : Bool → Bool =
\b => elim b
| True => False
| False => True

def main : Bool = not $ not $ zero? $
  id Nat $ id Nat (suc zero)
