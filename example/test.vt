module Test

data Bool
| true
| false

data Nat
| zero
| suc Nat

def trytry : {A : Type} -> (x : A) -> A =>
  \A x => x

def id {A : Type} (x : A) : A => x

def zero? (n : Nat) : Bool =>
match n
| zero => true
| suc _ => false

def plus (n m : Nat) : Nat =>
match n
| zero => m
| suc n => suc $ plus n m

def not (b : Bool) : Bool =>
match b
| true => false
| false => true

def NoB (b : Bool) : Type =>
match b
| true => Nat
| false => Bool

data Weekday
| monday
| tuesday
| wednesday
| thursday
| friday
| saturday
| sunday

def weekend? (day : Weekday) : Bool =>
match day
| saturday => true
| sunday => true
| _ => false

def main : NoB true => id $ plus (suc $ suc zero) (suc zero)
