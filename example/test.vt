module Test

data Bool
| true
| false

data Nat
| zero
| suc Nat

def trytry : {A : Type} -> (x : A) -> A =>
  \x => x

def id {A : Type} (x : A) : A => x

def zero? (n : Nat) : Bool =>
match n
| zero => true
| suc _ => false

def not (b : Bool) : Bool =>
match b
| true => false
| false => true

data Weekday
| monday
| tuesday
| wednesday
| thursday
| friday
| saturday
| sunday

-- def weekend? (day : Weekday) : Bool =>
-- match day
-- | saturday => true
-- | sunday => true
-- | _ => false

def NoB (b : Bool) : Type =>
match b
| true => Nat
| false => Bool

-- def plus (n m : Nat) : Nat =>
-- match n
-- | zero => m
-- | suc n => suc $ plus n m

def main : NoB false => not <| zero? (suc zero)
