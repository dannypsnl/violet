module Test

data Unit | unit

data Bool
  | true
  | false

data Nat
  | zero
  | suc Nat

def trytry : {A : Type}
  ---------------------
  -> (x : A) -> A =>
  \x => x

def id {A : Type} (x : A) : A => x

def plus (n m : Nat) : Nat =>
  match n
  | zero => m
  | suc n => suc <| plus n m

def example : Nat => plus (suc (suc (suc zero))) (suc (suc zero))

def zero? (n : Nat) : Bool =>
  match n
  | zero => true
  | suc _ => false

def not (b : Bool) : Bool =>
  match b
  | true => false
  | false => true

data Weekday
  | monday
  | tuesday
  | wednesday
  | thursday
  | friday
  | saturday
  | sunday

-- def weekend? (day : Weekday) : Bool =>
-- match day
-- | saturday => true
-- | sunday => true
-- | _ => false

def NoB (b : Bool) : Type =>
  match b
  | true => Nat
  | false => Bool

def main : NoB false => not <| zero? (suc zero)

def test_pair : Nat × Nat => (zero, suc zero)
def test_pair2 : Nat × Bool => (zero, false)
def test_pair3 : (x : Bool) × NoB x => (true, zero)
def test_pair4 : (x : Bool) × NoB x => (false, true)

record NatBool where
  a : Nat;
  b : Bool;
  c : Bool;

def test_record : NatBool => (zero, (true, false))

record T where
  a : Nat;
  b : Bool;

def test_record2 (x : Nat) : T => (x, zero? x)

record T2 where

def test_record3 : T2 => unit

record T3 where
  a : Nat;
  b : Bool;

def test_record4 (x : Nat) (y : Bool) : T3 => (x, y)
