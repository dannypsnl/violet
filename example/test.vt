module Test

data Bool
| True
| False

data Nat
| zero
| suc Nat

def id (A : U) (x : A) : A => x

def zero? (n : Nat) : Bool => elim n
| zero => True
| suc _ => False

def plus (n m : Nat) : Nat => elim n
| zero => m
| suc n => suc $ plus n m

def not (b : Bool) : Bool => elim b
| True => False
| False => True

def main : Nat => plus (suc $ suc zero) zero
