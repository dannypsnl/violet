module Test

data Bool
| true
| false

data Nat
| zero
| suc Nat

def id {A : U} (x : A) : A => x

def zero? (n : Nat) : Bool => elim n
| zero => true
| suc _ => false

def plus (n m : Nat) : Nat => elim n, m
| n, zero => n
| zero, m => m
| suc n, suc m => suc $ suc $ plus n m

def not (b : Bool) : Bool => elim b
| true => false
| false => true

def NoB (b : Bool) : U => elim b
| true => Nat
| false => Bool

def main : NoB true => id $ plus (suc $ suc zero) (suc zero)
