module Test

data Bool
| True
| False
;
data Nat
| zero
| suc Nat
;

let id : (A : U) -> (_ : A) -> A = \ A x => x;

let zero? : Nat → Bool =
\n => elim n
| zero => True
| suc _ => False
;

let not : Bool → Bool =
\b => elim b
| True => False
| False => True
;

let main : Bool = not $ not $ zero? $ id Nat $ id Nat (suc zero);
