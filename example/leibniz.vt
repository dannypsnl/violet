module Leibniz

let Eq : (A : U) -> A -> A -> U =
  位 A x y => (P : A -> U) -> P x -> P y;

let refl : (A : U) -> (x : A) -> Eq A x x =
  位 A x _ Px => Px;

let sym : (A : U) -> (x : A) -> (y : A) -> Eq A x y -> Eq A y x =
  位 A x y p => p (位 y => Eq A y x) (refl A x);
