module Leibniz

def Eq {A : Type} (x y : A) : Type =>
	(P : A -> Type) -> P x -> P y

def refl {A : Type} (x : A) : Eq x x =>
	-- TODO: should we insert a lambda here, so user can omit implicit lambda case by default?
	Î» _ Px => Px

def sym {A : Type} (x y : A) : Eq x y -> Eq y x =>
	Î» p => p (Î» y => Eq y x) (refl x)
