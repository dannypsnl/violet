module Leibniz

def Eq (A : U) (x : A) (y : A) : U =>
  (P : A -> U) -> P x -> P y

def refl (A : U) (x : A) : Eq A x x =>
  Î» _ Px => Px

def sym (A : U) (x : A) (y : A) : Eq A x y -> Eq A y x =>
  Î» p => p (Î» y => Eq A y x) (refl A x)
