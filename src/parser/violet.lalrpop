use std::str::FromStr;
use crate::ast::*;

grammar;

pub File : File = {
    <m:Mod>
    <ts:Top*> => File {
        module: m,
        top_list: ts
    }
}

pub Mod : Mod = {
    "(" "module" <n:Id> ")" => Mod { name: n, export_list: vec![] }
}

pub Top : Top = {
    "(" "define" <n:Id> <e:Expr> ")" => Top::DefineVar(n, e),
    "(" ":" <n:Id> ":" <t1:Type> "->" <t2:Type> ")" => Top::TypeDecl(Type::Arrow(Box::new(t1), Box::new(t2))),
    "(" ":" <n:Id> ":" <ty:Type> ")" => Top::TypeDecl(ty)
}

pub Type : Type = {
    <n:Id> => Type::Base(n),
}

pub Expr : Expr  = {
    <n:Int> => Expr::Int(n)
}

Int: i64 = <s:r"[0-9]+"> => i64::from_str(s).unwrap();
Id: String = <s:r"[a-zA-Z_%!*+=?]+"> => s.into();
