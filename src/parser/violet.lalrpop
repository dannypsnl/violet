use std::str::FromStr;
use crate::ast::*;
use crate::ast::Range::R;

grammar;

pub File : File = {
    <module:Mod>
    <top_list:Top*>
    => File {path: String::new(), source: String::new(), module, top_list}
}

pub Mod : Mod = {
    "(" "module" <name:Id> ")" => Mod {name: name, export_list: vec![]}
}

pub Top : Top = {
    <l:@L> "(" "define" <n:Id> <e:Expr> ")" <r:@R> => Top::DefineVar(R(l, r), n, e),
    <l:@L> "(" "define" "(" <n:Id> <p:Id*> ")"
      <e:Expr> ")"
      <r:@R> => Top::DefineProc(R(l, r), n, p, e),
    <l:@L> "(" ":" <n:Id> ":" <t1:Type*> "->" <t2:Type> ")" <r:@R> => Top::TypeDecl(R(l, r), n, Type::Arrow(t1, Box::new(t2))),
    <l:@L> "(" ":" <n:Id> ":" <ty:Type> ")" <r:@R> => Top::TypeDecl(R(l, r), n, ty)
}

pub Type : Type = {
    <n:Id> => Type::Base(<>),
}

pub Expr : Expr  = {
    <l:@L> <n:Int> <r:@R> => Expr::Int(R(l, r), n),
    <l:@L> <n:Id> <r:@R> => Expr::Id(R(l, r), n)
}

Int: i64 = <s:r"[0-9]+"> => i64::from_str(s).unwrap();
Id: String = <s:r"[a-zA-Z_%!*+=?][a-zA-Z0-9_%!*+=?]*"> => s.into();
